import express, { Request, Response } from "express";
import { upload, deleteFile } from "../middleware/fileHandler";
import {
  createOrder,
  updateOrderStatus,
  deleteOrder,
  getOrdersByUserId,
} from "../models/Orders";
import { authMiddleware } from "../middleware/authMiddleware";
import TelegramBot from "node-telegram-bot-api";
import dotenv from "dotenv";

dotenv.config();
const router = express.Router();
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, { polling: true });
const ADMIN_CHAT_ID = process.env.ADMIN_CHAT_ID!;

// üìå API –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–°–†–ê–ó–£ –î–û–ë–ê–í–õ–Ø–ï–ú –í –ë–ê–ó–£)
router.post(
  "/orders",
  upload.single("orderImg"),
  async (req: Request, res: Response): Promise<void> => {
    // –î–æ–±–∞–≤–∏–ª–∏ : Promise<void>
    try {
      const {
        userId,
        username,
        email,
        phone,
        location,
        city,
        address,
        comment,
        size,
        price,
        promoCode,
        orderDate,
        deliveryDate,
        productType,
      } = req.body;
      const orderImg = req.file;

      if (
        !userId ||
        !city ||
        !address ||
        !size ||
        !price ||
        !orderImg ||
        !orderDate ||
        !deliveryDate ||
        !productType
      ) {
        res.status(400).json({ message: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" }); // ‚ùå –£–±—Ä–∞–ª–∏ return, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º res.json()
        return;
      }

      // üìå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –ë–î —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º "pending"
      const orderID = await createOrder(
        Number(userId),
        location,
        "pending",
        orderDate,
        deliveryDate,
        productType
      );

      // üìå –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const message = `
üì¶ *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!*
üÜî *Order ID:* ${orderID}
üé® *–¢–∏–ø –ø—Ä–æ–¥—É–∫—Ç–∞:* ${productType}
üìÖ *–î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞:* ${orderDate}
üì¶ *–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏:* ${deliveryDate}
üë§ *–ö–ª–∏–µ–Ω—Ç:* ${username} (${email})
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}
üìç *–õ–æ–∫–∞—Ü–∏—è:* ${location}
üèô *–ì–æ—Ä–æ–¥:* ${city}
üè† *–ê–¥—Ä–µ—Å:* ${address}
üí¨ *–ö–æ–º–µ–Ω—Ç–∞—Ä–∏–∏:* ${comment}
üéÅ *–†–∞–∑–º–µ—Ä:* ${size}
üí∞ *–¶–µ–Ω–∞:* ${price} —Ä—É–±.
üéü *–ü—Ä–æ–º–æ–∫–æ–¥:* ${promoCode || "–ù–µ—Ç"}
        `;

      // üìå –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ Telegram —Å —Ñ–æ—Ç–æ
      await bot.sendPhoto(ADMIN_CHAT_ID, orderImg.path, {
        caption: message,
        parse_mode: "Markdown",
        reply_markup: {
          inline_keyboard: [
            [{ text: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data: `confirm_${orderID}` }],
            [{ text: "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data: `reject_${orderID}` }],
            [
              {
                text: "üöö –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω",
                callback_data: `shipped_${orderID}`,
              },
            ],
            [
              {
                text: "üì¶ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω",
                callback_data: `completed_${orderID}`,
              },
            ],
          ],
        },
      });

      // üìå –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram
      deleteFile(orderImg.path);

      res.status(201).json({ orderID }); // ‚ùå –£–±—Ä–∞–ª–∏ return, –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º res.json()
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
      res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  }
);

// üìå –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ Telegram (–û–ë–ù–û–í–õ–ï–ù–ò–ï –°–¢–ê–¢–£–°–ê –ò –£–î–ê–õ–ï–ù–ò–ï)
bot.on("callback_query", async (query) => {
  const [action, orderID] = query.data!.split("_");

  try {
    if (action === "confirm") {
      await updateOrderStatus(orderID, "confirmed");
      bot.sendMessage(ADMIN_CHAT_ID, `‚úÖ –ó–∞–∫–∞–∑ ${orderID} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω.`);
    }

    if (action === "reject") {
      await deleteOrder(orderID); // Delete the order from the database
      bot.sendMessage(ADMIN_CHAT_ID, `‚ùå –ó–∞–∫–∞–∑ ${orderID} –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.`);
    }

    if (action === "shipped") {
      await updateOrderStatus(orderID, "shipped");
      bot.sendMessage(ADMIN_CHAT_ID, `üöö –ó–∞–∫–∞–∑ ${orderID} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.`);
    }

    if (action === "completed") {
      await deleteOrder(orderID); // Delete the order from the database
      bot.sendMessage(ADMIN_CHAT_ID, `üì¶ –ó–∞–∫–∞–∑ ${orderID} –∑–∞–≤–µ—Ä—à–µ–Ω –∏ —É–¥–∞–ª–µ–Ω.`);
    }

    bot.answerCallbackQuery(query.id);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ Telegram:", error);
    bot.sendMessage(ADMIN_CHAT_ID, `‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞ ${orderID}`);
  }
});

// router.get("/orders/:id", async (req: Request, res: Response) => {
//     try {
//         const { id } = req.params;
//         const order = await getOrderById(id);

//         if (!order) {
//              res.status(404).json({ message: "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
//              return
//         }

//         res.json(order);
//     } catch (error) {
//         console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞:", error);
//         res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
//     }
// });

// router.get("/orders/:id", authMiddleware, async (req: Request, res: Response) => {
//     try {
//       const { id } = req.params;
//       const userId = (req as any).user?.id; // ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ middleware

//       if (!userId) {
//          res.status(401).json({ message: "Unauthorized" });
//          return
//       }

//       const order = await getOrderById(id);

//       // ‚ùå –ï—Å–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º 404
//       if (!order) {
//          res.status(404).json({ message: "Order not found" });
//          return
//       }

//       // üîí –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–≤–ø–∞–¥–∞–µ—Ç –ª–∏ userId –≤ –∑–∞–∫–∞–∑–µ —Å —Ç–µ–∫—É—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
//       if (order.user_id !== userId) {
//          res.status(403).json({ message: "Access denied" }); // –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞
//          return
//       }

//       res.json(order);
//     } catch (error) {
//       console.error("Error receiving order:", error);
//       res.status(500).json({ message: "Server error" });
//     }
//   });

router.get("/orders", authMiddleware, async (req: Request, res: Response) => {
  try {
    const userId = (req as any).user?.id; // ID –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if (!userId) {
      res.status(401).json({ message: "Unauthorized" });
      return;
    }

    const orders = await getOrdersByUserId(userId); // üìå –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    res.json(orders);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤:", error);
    res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

export default router;
