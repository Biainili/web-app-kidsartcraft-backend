import pool from "../db";

// üìå –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ 6-—Å–∏–º–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º –ø–æ –ª–æ–∫–∞—Ü–∏–∏
function generateOrderID(location: string): string {
  const characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"; // –°–∏–º–≤–æ–ª—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
  let orderID = "";

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 6 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
  for (let i = 0; i < 6; i++) {
    orderID += characters.charAt(Math.floor(Math.random() * characters.length));
  }

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–∫–∞—Ü–∏–∏
  let prefix = "XX"; // –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  if (location === "Russia") prefix = "RU";
  if (location === "Armenia") prefix = "AM";

  return `${prefix}-${orderID}`; // –ü—Ä–∏–º–µ—Ä: RU-7G2ZBX
}

// üìå –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ `order_id`
async function generateUniqueOrderID(location: string): Promise<string> {
  let orderID = generateOrderID(location); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π `order_id` –≤ –ë–î
  let result = await pool.query(
    `SELECT order_id FROM orders WHERE order_id = $1`,
    [orderID]
  );
  let rowCount: number = result.rowCount ?? 0; // –ï—Å–ª–∏ `null`, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ `0`

  // –ï—Å–ª–∏ `order_id` —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π, –ø–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π
  while (rowCount > 0) {
    orderID = generateOrderID(location);
    result = await pool.query(
      `SELECT order_id FROM orders WHERE order_id = $1`,
      [orderID]
    );
    rowCount = result.rowCount ?? 0; // –û–±–Ω–æ–≤–ª—è–µ–º `rowCount`, –µ—Å–ª–∏ `null`, –∑–∞–º–µ–Ω—è–µ–º –Ω–∞ `0`
  }

  return orderID;
}

// üìå –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
export async function createOrder(
  userID: number,
  location: string,
  status: string,
  orderDate: string,
  deliveryDate: string,
  productType: string
) {
  try {
    const orderID = await generateUniqueOrderID(location); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID

    await pool.query(
      `INSERT INTO orders (order_id, user_id, status, order_date, delivery_date, product_type) VALUES ($1, $2, $3, $4, $5, $6)`,
      [orderID, userID, status, orderDate, deliveryDate, productType]
    );

    return orderID; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ Telegram-–±–æ—Ç–µ
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –ë–î:", error);
    throw error;
  }
}

// üìå –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
export async function updateOrderStatus(orderID: string, status: string) {
  try {
    await pool.query(`UPDATE orders SET status = $1 WHERE order_id = $2`, [
      status,
      orderID,
    ]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞:", error);
    throw error;
  }
}

//  –§—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∏–ª–∏ –∑–∞–≤–µ—Ä—à–µ–Ω)
export async function deleteOrder(orderID: string) {
  try {
    await pool.query(`DELETE FROM orders WHERE order_id = $1`, [orderID]);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞:", error);
    throw error;
  }
}

//  Function of receiving an order by ID

export async function getOrdersByUserId(userId: number) {
  try {
    const { rows } = await pool.query(
      `SELECT order_id, status, order_date, delivery_date 
             FROM orders WHERE user_id = $1`,
      [userId]
    );
    return rows;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∑–∞–∫–∞–∑–æ–≤:", error);
    throw error;
  }
}
